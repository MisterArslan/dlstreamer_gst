diff --git a/gst/vaapi/gstvaapivideometa.c b/gst/vaapi/gstvaapivideometa.c
index 08040a9d..82b3cb8e 100644
--- a/gst/vaapi/gstvaapivideometa.c
+++ b/gst/vaapi/gstvaapivideometa.c
@@ -586,6 +586,13 @@ gst_vaapi_video_meta_set_surface_proxy (GstVaapiVideoMeta * meta,
     if (crop_rect)
       gst_vaapi_video_meta_set_render_rect (meta, crop_rect);
   }
+
+  if (proxy && meta != NULL && meta->buffer != NULL) {
+    gst_mini_object_set_qdata(&meta->buffer->mini_object, g_quark_from_static_string("VADisplay"),
+                              gst_vaapi_display_get_display(gst_vaapi_video_meta_get_display(meta)), NULL);
+    gst_mini_object_set_qdata(&meta->buffer->mini_object, g_quark_from_static_string("VASurfaceID"),
+                              (void*)gst_vaapi_surface_proxy_get_surface_id(proxy), NULL);
+  }
 }
 
 /**


From fe6a9acab3b4a465072f20e9d8208814079c65ce Mon Sep 17 00:00:00 2001
From: He Junyan <junyan.he@intel.com>
Date: Fri, 14 May 2021 11:49:01 +0800
Subject: [PATCH 1/2] plugins: video memory: Add a GST_MAP_VAAPI flag to peek
 the surface.

Just like what we do in VA plugins, the GST_MAP_VAAPI can directly
peek the surface of the VA buffers. The old flag 0 just peek the
surface proxy, which may not be convenient for the users who do not
want to include our headers.
---
 gst/vaapi/gstvaapivideomemory.c | 16 ++++++++++++++--
 gst/vaapi/gstvaapivideomemory.h |  2 ++
 2 files changed, 16 insertions(+), 2 deletions(-)

diff --git a/gst/vaapi/gstvaapivideomemory.c b/gst/vaapi/gstvaapivideomemory.c
index 750385a4..8c1f5887 100644
--- a/gst/vaapi/gstvaapivideomemory.c
+++ b/gst/vaapi/gstvaapivideomemory.c
@@ -378,6 +378,7 @@ gst_vaapi_video_memory_new (GstAllocator * base_allocator,
   mem->meta = meta ? gst_vaapi_video_meta_ref (meta) : NULL;
   mem->map_type = 0;
   mem->map_count = 0;
+  mem->map_surface_id = VA_INVALID_ID;
   mem->usage_flag = allocator->usage_flag;
   g_mutex_init (&mem->lock);
 
@@ -437,8 +438,9 @@ gst_vaapi_video_memory_map (GstMemory * base_mem, gsize maxsize, guint flags)
 
   g_mutex_lock (&mem->lock);
   if (mem->map_count == 0) {
-    switch (flags & GST_MAP_READWRITE) {
+    switch (flags & (GST_MAP_READWRITE | GST_MAP_VAAPI)) {
       case 0:
+      case GST_MAP_VAAPI:
         // No flags set: return a GstVaapiSurfaceProxy
         gst_vaapi_surface_proxy_replace (&mem->proxy,
             gst_vaapi_video_meta_get_surface_proxy (mem->meta));
@@ -462,7 +464,16 @@ gst_vaapi_video_memory_map (GstMemory * base_mem, gsize maxsize, guint flags)
     case GST_VAAPI_VIDEO_MEMORY_MAP_TYPE_SURFACE:
       if (!mem->proxy)
         goto error_no_surface_proxy;
-      data = mem->proxy;
+
+      if (flags == GST_MAP_VAAPI) {
+        mem->map_surface_id = GST_VAAPI_SURFACE_PROXY_SURFACE_ID (mem->proxy);
+        if (mem->map_surface_id == VA_INVALID_ID)
+          goto error_no_current_surface;
+
+        data = &mem->map_surface_id;
+      } else {
+        data = mem->proxy;
+      }
       break;
     case GST_VAAPI_VIDEO_MEMORY_MAP_TYPE_LINEAR:
       if (!mem->image)
@@ -515,6 +526,7 @@ gst_vaapi_video_memory_unmap_full (GstMemory * base_mem, GstMapInfo * info)
   if (mem->map_count == 1) {
     switch (mem->map_type) {
       case GST_VAAPI_VIDEO_MEMORY_MAP_TYPE_SURFACE:
+        mem->map_surface_id = VA_INVALID_ID;
         gst_vaapi_surface_proxy_replace (&mem->proxy, NULL);
         break;
       case GST_VAAPI_VIDEO_MEMORY_MAP_TYPE_LINEAR:
diff --git a/gst/vaapi/gstvaapivideomemory.h b/gst/vaapi/gstvaapivideomemory.h
index 41a05888..23d68ad7 100644
--- a/gst/vaapi/gstvaapivideomemory.h
+++ b/gst/vaapi/gstvaapivideomemory.h
@@ -128,6 +128,7 @@ struct _GstVaapiVideoMemory
   GstVaapiVideoMeta *meta;
   guint map_type;
   gint map_count;
+  VASurfaceID map_surface_id;
   GstVaapiImageUsageFlags usage_flag;
   GMutex lock;
 };
@@ -157,6 +158,7 @@ gst_vaapi_video_memory_sync (GstVaapiVideoMemory * mem);
 /* ------------------------------------------------------------------------ */
 /* --- GstVaapiVideoAllocator                                           --- */
 /* ------------------------------------------------------------------------ */
+#define GST_MAP_VAAPI (GST_MAP_FLAG_LAST << 1)
 
 #define GST_VAAPI_VIDEO_ALLOCATOR_CAST(allocator) \
   ((GstVaapiVideoAllocator *) (allocator))
-- 
GitLab


From 251332fa216f47922f1d05dc13f252dc2c51b548 Mon Sep 17 00:00:00 2001
From: He Junyan <junyan.he@intel.com>
Date: Fri, 14 May 2021 12:04:04 +0800
Subject: [PATCH 2/2] Display: Add a property to export the VA display handle.

Just like what we do in VA plugins. The display can be seen as a
generic gst object and we can add a property to get the internal
VA handle.
---
 gst-libs/gst/vaapi/gstvaapidisplay.c | 15 +++++++++++++++
 gst/vaapi/gstvaapivideocontext.c     |  4 ++--
 2 files changed, 17 insertions(+), 2 deletions(-)

diff --git a/gst-libs/gst/vaapi/gstvaapidisplay.c b/gst-libs/gst/vaapi/gstvaapidisplay.c
index 26c216e7..878761af 100644
--- a/gst-libs/gst/vaapi/gstvaapidisplay.c
+++ b/gst-libs/gst/vaapi/gstvaapidisplay.c
@@ -86,6 +86,7 @@ enum
   PROP_SATURATION,
   PROP_BRIGHTNESS,
   PROP_CONTRAST,
+  PROP_VA_DISPLAY,
 
   N_PROPERTIES
 };
@@ -1123,6 +1124,11 @@ gst_vaapi_display_get_property (GObject * object, guint property_id,
   GstVaapiDisplay *display = GST_VAAPI_DISPLAY (object);
   const GstVaapiProperty *prop;
 
+  if (property_id == PROP_VA_DISPLAY) {
+    g_value_set_pointer (value, gst_vaapi_display_get_display (display));
+    return;
+  }
+
   if (!ensure_properties (display))
     return;
 
@@ -1224,6 +1230,15 @@ gst_vaapi_display_class_init (GstVaapiDisplayClass * klass)
       "contrast",
       "The display contrast value", 0.0, 2.0, 1.0, G_PARAM_READWRITE);
 
+  /**
+   * GstVaapiDisplay:va-display:
+   *
+   * The VA display handle, expressed as a #VADisplay.
+   */
+  g_properties[PROP_VA_DISPLAY] =
+      g_param_spec_pointer ("va-display", "VADisplay",
+      "VA Display handler", G_PARAM_READABLE | G_PARAM_STATIC_STRINGS);
+
   g_object_class_install_properties (object_class, N_PROPERTIES, g_properties);
   gst_type_mark_as_plugin_api (gst_vaapi_display_type_get_type (), 0);
 }
diff --git a/gst/vaapi/gstvaapivideocontext.c b/gst/vaapi/gstvaapivideocontext.c
index ae3af85d..75dee65b 100644
--- a/gst/vaapi/gstvaapivideocontext.c
+++ b/gst/vaapi/gstvaapivideocontext.c
@@ -63,7 +63,7 @@ gst_vaapi_video_context_set_display (GstContext * context,
 
   structure = gst_context_writable_structure (context);
   gst_structure_set (structure, GST_VAAPI_DISPLAY_CONTEXT_TYPE_NAME,
-      GST_TYPE_VAAPI_DISPLAY, display, NULL);
+      GST_TYPE_OBJECT, display, NULL);
 }
 
 GstContext *
@@ -92,7 +92,7 @@ gst_vaapi_video_context_get_display (GstContext * context, gboolean app_context,
   if (!g_strcmp0 (type, GST_VAAPI_DISPLAY_CONTEXT_TYPE_NAME)) {
     structure = gst_context_get_structure (context);
     return gst_structure_get (structure, GST_VAAPI_DISPLAY_CONTEXT_TYPE_NAME,
-        GST_TYPE_VAAPI_DISPLAY, display_ptr, NULL);
+        GST_TYPE_OBJECT, display_ptr, NULL);
   }
 
   if (app_context && !g_strcmp0 (type, GST_VAAPI_DISPLAY_APP_CONTEXT_TYPE_NAME)) {
-- 
GitLab

